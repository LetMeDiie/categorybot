package kz.amihady.categorytree.service.converter.impl;


import kz.amihady.categorytree.dto.CategoryDto;
import kz.amihady.categorytree.exception.CategoryTreeConversionFileException;
import kz.amihady.categorytree.service.converter.CategoryTreeConverter;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–π—Ç —Ñ–∞–π–ª
@Slf4j
public class CategoryTreeExelConverter implements CategoryTreeConverter<byte[]> {
    public byte[] convert(List<CategoryDto> categoryDtoList) {
        Map<Long, List<CategoryDto>> categoryMap = categoryDtoList.stream()
                .collect(Collectors.groupingBy(CategoryDto::parentId));
        try (XSSFWorkbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet("Categories");

            // –®—Ä–∏—Ñ—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            XSSFFont font = workbook.createFont();
            font.setBold(true);

            Row headerRow = sheet.createRow(0);
            headerRow.createCell(0).setCellValue("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏");

            int rowNum = 1;
            rowNum = buildTree(categoryMap, -1L, 0, sheet, rowNum, font);

            // –°–æ–∑–¥–∞–µ–º ByteArrayOutputStream –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–º—è—Ç—å
            try (ByteArrayOutputStream byteArrayOut = new ByteArrayOutputStream()) {
                workbook.write(byteArrayOut);
                log.info("–§–∞–π–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
                return byteArrayOut.toByteArray(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–π—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤
            } catch (IOException e) {
                log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ Exel");
                throw new CategoryTreeConversionFileException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ Excel –≤ –ø–æ—Ç–æ–∫ –ø–∞–º—è—Ç–∏.");
            }
        } catch (IOException e) {
            log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–π Exel");
            throw  new CategoryTreeConversionFileException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ Excel —Ñ–∞–π–ª–∞.");
        }
    }
    private int buildTree(Map<Long, List<CategoryDto>> categoryMap, Long parentId, int level,
                          Sheet sheet, int rowNum, XSSFFont font) {
        List<CategoryDto> children = categoryMap.getOrDefault(parentId, Collections.emptyList());

        for (CategoryDto category : children) {
            String icon = (parentId == -1) ? "üìÇ" : (categoryMap.containsKey(category.categoryId()) ? "üìÅ" : "üìÑ");
            String indent = "‚ÄÉ".repeat(level); // –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
            String categoryName = indent + icon + " " + category.categoryName();

            Row row = sheet.createRow(rowNum++);
            Cell cell = row.createCell(0);
            cell.setCellValue(categoryName);

            // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–º–µ–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –¥–ª—è –Ω–µ–µ
            rowNum = buildTree(categoryMap, category.categoryId(), level + 1, sheet, rowNum, font);
        }
        return rowNum;
    }
}

