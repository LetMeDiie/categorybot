package kz.amihady.categorytree.controller;

import feign.FeignException;
import kz.amihady.categorytree.exception.CategoryTreeConversionFileException;
import kz.amihady.categorytree.service.CategoryTreeService;
import kz.amihady.categorytree.service.response.CategoryTreeStringResponse;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;


@WebMvcTest(CategoryTreeRestController.class)
class CategoryTreeRestControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private CategoryTreeService categoryTreeService;

    @Test
    void testViewTree_Success() throws Exception {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        Long userId = 1L;
        String mockTreeResponse = "‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è 1\n   ‚Üí üìÑ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è 1.1\n";
        CategoryTreeStringResponse categoryTreeStringResponse = new CategoryTreeStringResponse(mockTreeResponse);

        // –ú–æ–∫–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        when(categoryTreeService.getTreeAsString(userId)).thenReturn(categoryTreeStringResponse);

        // –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å
        mockMvc.perform(get("/viewTree/{userId}", userId))
                .andExpect(status().isOk())  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ OK
                .andExpect(jsonPath("$.categoryTree").value(mockTreeResponse));  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        verify(categoryTreeService, times(1)).getTreeAsString(userId);
    }



    @Test
    void testViewTree_Error() throws Exception {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        Long userId = 1L;

        // –ú–æ–∫–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        when(categoryTreeService.getTreeAsString(userId)).thenThrow(new CategoryTreeConversionFileException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞"));

        // –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ 400
        mockMvc.perform(get("/viewTree/{userId}", userId))
                .andExpect(status().isBadRequest())  // –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 400
                .andExpect(jsonPath("$.message").value("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞"));  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        verify(categoryTreeService, times(1)).getTreeAsString(userId);
    }

    @Test
    void testDownload_CategoryTreeConversionFileException() throws Exception {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        Long userId = 1L;

        // –ú–æ–∫–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        when(categoryTreeService.getTreeAsExel(userId)).thenThrow(new CategoryTreeConversionFileException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Excel"));

        // –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ 400
        mockMvc.perform(get("/download/{userId}", userId))
                .andExpect(status().isBadRequest())  // –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 400
                .andExpect(jsonPath("$.errorMessage").value("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Excel"));  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        verify(categoryTreeService, times(1)).getTreeAsExel(userId);
    }

    @Test
    void testViewTree_Fail_FeignException() throws Exception {
        Long userId = 1L;

        // –ú–æ–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ FeignException
        when(categoryTreeService.getTreeAsString(userId))
                .thenThrow(FeignException.class); // –ë—Ä–æ—Å–∞–µ–º FeignException

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        mockMvc.perform(get("/viewTree/{userId}", userId))
                .andExpect(status().isInternalServerError()) // –û–∂–∏–¥–∞–µ–º –∫–æ–¥ 500
                .andExpect(jsonPath("$.errorMessage").value("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É")); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    }

    @Test
    void testDownload_Fail_FeignException() throws Exception {
        Long userId = 1L;

        when(categoryTreeService.getTreeAsExel(userId))
                .thenThrow(FeignException.class);

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        mockMvc.perform(get("/download/{userId}", userId))
                .andExpect(status().isInternalServerError()) // –û–∂–∏–¥–∞–µ–º –∫–æ–¥ 500
                .andExpect(jsonPath("$.errorMessage").value("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É")); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    }
}