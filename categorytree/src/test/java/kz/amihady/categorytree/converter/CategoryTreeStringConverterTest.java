package kz.amihady.categorytree.converter;
import kz.amihady.categorytree.dto.CategoryDto;
import kz.amihady.categorytree.service.converter.impl.CategoryTreeStringConverter;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.*;

public class CategoryTreeStringConverterTest {

    @Test
    public void testConvertSingleLevel() {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        List<CategoryDto> categoryDtoList = List.of(
                new CategoryDto(1L, -1L, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1")
        );

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
        CategoryTreeStringConverter converter = new CategoryTreeStringConverter();

        // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        String expected = "‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è 1\n";

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        String result = converter.convert(categoryDtoList);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º
        assertEquals(expected, result);
    }


    @Test
    public void testConvertNoParentCategories() {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        List<CategoryDto> categoryDtoList = List.of(
                new CategoryDto(1L, -1L, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1"),
                new CategoryDto(2L, -1L, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2")
        );

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
        CategoryTreeStringConverter converter = new CategoryTreeStringConverter();

        // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        String expected = "‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è 1\n" +
                          "‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è 2\n";

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        String result = converter.convert(categoryDtoList);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º
        assertEquals(expected, result);
    }

    @Test
    public void testCategoryTreeStringConversion() {
        // –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
        List<CategoryDto> categories = List.of(
                new CategoryDto(1L, -1L, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1"),
                new CategoryDto(2L, 1L, "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è 1.1")
        );

        // –°—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ–∂–∏–¥–∞–µ–º
        String expectedOutput =
                        "‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è 1\n" +
                        " ‚Üí üìÑ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è 1.1\n";

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é CategoryTreeStringConverter
        CategoryTreeStringConverter converter = new CategoryTreeStringConverter();
        String result = converter.convert(categories);

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º
        assertEquals(expectedOutput, result);
    }
}
